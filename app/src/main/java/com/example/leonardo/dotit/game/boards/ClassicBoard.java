package com.example.leonardo.dotit.game.boards;

import com.example.leonardo.dotit.game.Connection;
import com.example.leonardo.dotit.game.Dot;

import java.util.ArrayList;

/**
 * Created by Leonardo on 28/04/2016.
 */
public class ClassicBoard extends Board {
    public static final String[][] levels = { {"01", "3000101021102201120212122" }, // Z
            {"02", "3000101021102201120212122122210111112" }, // Z ligado com 2 tra√ßos
            {"03", "311210111010200010102" }, // T
            {"04", "310111020001010200001" }, // F
            {"05", "3111222110011112200010102" }, // F BUGADO
            {"06", "31112122202121222010201111121" }, // A
            {"07", "311201112101111122110" }, // W24
            {"08", "30010101101110111112120212021212212220212" }, // W38
            {"09", "3112110110010000101020212122220212122" }, // W19
            {"10", "321222021212211201011101111120112010200010102"}, //A DAORINHA QUE EU FIZ
            {"11", "321121021011000010010102020212122021212221102" }, // W16
            {"12", "31121202110201011111212220212122201020001" }, // W4
            {"13", "311210211100210111112001222111100"}, // W51
            {"14", "3001021001121201102111120010222011222" }, // W47
            {"15", "3221112221011111201100111112120210211112000010102" }, // W49
            {"16", "300101100011101111121122102120212122220212122" }, // W48
            {"17", "3111221122122202121220211112001020001" }, // W54
            {"18", "31011001000011201211220210211112002121222" }, // W53
            {"19", "31121021120111102102010111112122200111122" },  // W20 - BEE 1
            {"20", "311200111011111212122001111220010101111120212"}, // W26 - BEE 2
            {"21", "301110102201111021020101111122112212200111122"}, // W41 - BEE 3
            {"22", "311200111011111211221122202121222000101020010" }, // W25
            {"23", "322111222101111120010000101111121202102111120" }, // W6
            {"24", "3011210010010110002112011110220212122" }, // W18
            {"25", "311200111120110111112001000010102021212222122" }, // W11
            {"26", "31122112101111121120102120001010200101020" }, // W22
            {"27", "321121021011001110211201111020010102022111100" }, // W13
            {"28", "302111002101111122012012001111121002122111100" }, // W17
            {"29", "310210110120111122011021111200001010222111100" }, // W27
            {"30", "311201112101111120110010200010102221111002122" }, // W29
            {"31", "31221011210010010001010202021212211220211" }, // W30
            {"32", "31021011012010212201111020010102022111100" }, // W28
            {"33", "32112102101100001110002112011110220212122" }, // W14
            {"34", "320110120011111210221021210111112001022111100" }, // W8
            {"35", "31020112000112211110021220111112112010212" }, // W9
            {"36", "301110011000101022102102110111112122220212122" }, //W43
            {"37", "31112101121102122202121220120010200010102" }, // A MINHA
            {"38", "31121001122111100122201121001102002111120" }, // W46
            {"39", "31221111202112011110210200110000122111100"}, // W45
            {"40", "31120111210111112011001020001010222111100" }, // W5
            {"41", "3112111121011111201100102000101022211110020212122" }, // W50
            {"42", "3101111120112011111212122202121220010102000010102" }, // W2
            {"43", "31121221100111122000110011020021111200212" }, // W32
            {"44", "30111021100010102001010111112122221222021" }, // W1
            {"45", "31121022101022201122210111112001000101020" }, // W36
            {"46", "3101111122012021111200212122200111122000101111121" }, // W35
            {"47", "311210211201111022021212200111122001010111112" }, // W34
            {"48", "3112100112211110020212122021111200102100110111112"}, // W44
            {"49", "311000211201111021220101111120110011111212122" }, // W10
            {"50", "310011011021120111102001010202211110012222112" }, // W12
            {"51", "301111121022100010102001010111112122220212122" }, // - NUM SEI
            {"52", "302110102100110111112211220212021212200111122"}, // W52
            {"53", "3021102121011111201100111112120210010102022111100" }, //W42
            {"54", "311200011221111001222101111122110011111210102" }, // W23
            {"55", "311122112011111210001221111002021212202111120"}, // W40
            {"56", "311020111120110111112211020210010102022111100"}, // A FODA QUE EU FIZ
            {"57", "311210211010210011011111212222021212200101020" }, // W21
            {"58", "31112101111120010001010200211112002121222012201111121" } }; // W31

    public ClassicBoard(int level, int screenWidth, int screenHeight) {
        super(levels[level], screenWidth, screenHeight);
        this.level = level;
    }

    @Override
    public void connect(ArrayList<Dot> dotsToConnect) {
        for (int i = 0; i + 1 < dotsToConnect.size(); i++) {
            Dot dot1 = dotsToConnect.get(i);
            Dot dot2 = dotsToConnect.get(i + 1);
            int strokeWidth = (int) ((LINE_WIDTH_PER_SCREEN_SIZE*(screenWidth + screenHeight)) /
                    Math.pow(DOTS_AND_LINES_RATIO_DIVISOR, dots.length - 3));
            Connection c = new Connection(dot1, dot2, strokeWidth);
            dot1.setUsed();
            dot2.setUsed();
            connectionsPlayer.add(c);
        }
    }

    @Override
    public void setXYLine(int x, int y) {
        this.xLine = x;
        this.yLine = y;
        boolean found = false;
        Dot newLastSelectedDot = null;

        for (int i = 0; i < dots.length && !found; i++){
            for (int j = 0; j < dots.length && !found; j++) {
                Dot d = dots[i][j];

                if (xLine <= d.getX() + (2*d.getSize()) && xLine >= d.getX() - (2*d.getSize()) &&
                        yLine <= d.getY() + (2*d.getSize()) && yLine >= d.getY() - (2*d.getSize())) {
                    if (!d.isUsed()) {
                        newLastSelectedDot = d;
                    }
                    found = true;
                }
            }
        }

        if (newLastSelectedDot != null) {
            if (lastSelectedDot != null && lastSelectedDot != newLastSelectedDot) {
                this.connect(lastSelectedDot, newLastSelectedDot);
            }
            lastSelectedDot = newLastSelectedDot;
        }
    }

    @Override
    public String[] getCurrentLevel() {
        if (level < levels.length) {
            return levels[level];
        } else {
            return new String[2];
        }
    }
}
